Common Questions
=====================

How do I start my app? What do I do now?
--------------------------------------------

The easiest way to get an intuition for app development is to follow `the tutorial`_

See if there is an existing app in `the catalog`_ that is similar to yours, or one that has a UI that you would like to emulate. Every app you see in the narrative will have a link to its code repository.

Typically developers follow this path:

1) Work on the ``MyModule.spec`` file. This will autogenerate methods in your ``MyModuleImpl.py`` file, which is where the core of your method functionality will reside.
2) Work on the functionality of the app in the autogenerated ``MyModuleImpl.py`` file.
3) Continue developing the app by working on unit tests
4) Define the UI by modifying ``spec.json`` and ``display.yaml`` files
5) Publish and test in the narrative

For these example apps, check out the ``.spec`` files, ``<module>Impl.py`` files, and ``spec.json`` files.

* Quast_
* Megahit_
* Trimmomatic_

How do I work with test and reference data?
-----------------------------------------------

Put simple data into the ``/data`` directory of your app's repository. If the data is too large to host on Github, check out the following guide for `how to add reference data`_.

Test files can go within the ``test/`` directory in your app, such as ``test/data/``.

.. note::

    Upload local genome files for of your tests. If you use an existing workspace reference in your tests that works in AppDev, it won't work in CI or production.

How do I organize my app's code?
-----------------------------------

There are a couple common patterns:

1) Create multiple functions and do everything inside the implementation file. An example of this pattern can be found in the Quast_ app.
2) Create a utils directory, create a runner or utility class, pass in the configuration file and parameter files to it, and do everything in there. An example of this pattern can be found in the FastANI_ app.

For more complex apps, the second option is preferred, as you can split up functionality into different modules and packages.

Help! My python code keeps disappearing? What happened to it?
---------------------------------------------------------------

Magic comments are comments that are used internally by the kbase_sdk in order to generate the implementation file when you make changes to the spec file.

Examples of magic comments include:

.. code:: python

    #BEGIN_HEADER
    (This is where your import statements go)
    #END_HEADER

    #BEGIN_CLASS_HEADER
    (This is where your class variables and functions go that you want imported)
    #END_CLASS_HEADER

    #BEGIN_CONSTRUCTOR
    (This is in your init statement for your class goes)
    #END_CONSTRUCTOR

    #BEGIN YourFunctionName1
    (This is were the implementation details of your functions go)
    #END YourFunctionName1


Any code created outside of the Magic Comments will not be included inside the final .impl implementation file.

Validation
--------------

Q: How does validation work?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Currently validation is done in the UI based on values provided in the ui/narrative/methods/spec.json. When invalid input is entered in the UI for the app, an error will display to the user, and the user will not be able to submit the form for the app.

Validation is not provided for the app to be called programmatically (such as with unit tests) so you will have to validate your input again. It may be possible to generate validation programmatically using the spec.json file, but this is not currently an out of the box feature.

Q: How do I learn more about the spec.json file?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

While there isn't a document with all of the valid UI Parameters, you can check out this notebook with a variety of different options at `User Interface Parameter Gallery`_.

Q: What are all the auto-generated source files in my app?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

These files are created by the KBase type compiler, which takes your KIDL type file (``MyModule.spec``) and generates different modules that are inserted into your codebase. These files are used by docker and service handlers to run your app and its dependencies.

In python apps, the ``authclient.py`` and ``baseclient.py`` files get placed into the package directory for your own app, as well as all other the package directories. These files are generally the same across all the packages in your app. ``authclient.py`` handles authenticating the user so they can access the workspace, while ``baseclient.py`` has functionality for running SDK apps and calling their methods.

Other auto-generated files in python apps include the ``*Client.py`` and ``*Server.py`` files in each package. Each app has an ``AppNameClient.py`` module in its package. These modules contain classes that can receive parameters for the app and pass that data to the app's server

The ``MyModuleServer.py`` file gets auto-generated and saved only for your own app's package directory. It handles requests from the python clients.

Q: What makes the tests slow to run?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Every time we run ``kb-sdk test`` it rebuilds the docker container and re-downloads data objects from your workspace.

Ways you can speed up your tests:

* Make sure all your custom docker setup, such as compiling binaries, is at the top of your Dockerfile so it always gets cached
* Reduce the amount of files you download and upload
* Reuse existing example files on the workspace so you don't have to upload files
* Separate out your modules into functions that only take local data and files, and test those separately

Q: When you install and run SDK Apps from within your own app, how are these running?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

SDK app dependencies that you use in your own app, such as ``DataFileUtil``, run in their own docker containers using their own separate servers.

When you use something like ``AssemblyUtil`` in your app, a job manager will schedule and run that app as a separate job. Despite the fact that it is run as an external job, it is not run in parallel. Your own app will hang until the other app finishes its work.

Docker
-------

Q: Should I always specify a specific version of a library or executable?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Generally it is recommended to lock any requirements in your app to specific versions. The disadvantages of specifying versions is that you won't automatically use newer versions of your dependencies, but the advantage is that your app will be more reliable and guards against breaking changes in its dependencies.

Q: Where do I install binaries in docker?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You can install binaries to a directory like ``/kb/deployment/bin`` and then add them to your path:

.. code-block:: bash

    # Install Diamond Binary v0.9.17
    WORKDIR /kb/deployment/bin
    RUN wget https://github.com/bbuchfink/diamond/releases/download/v0.9.17/diamond-linux64.tar.gz \
        && tar -xvf diamond-linux64.tar.gz diamond \
        && rm diamond-linux64.tar.gz
    ENV PATH="/kb/deployment/bin:${PATH}"


Also see the `Editing Docker`_


Q: How do I get inside the docker image? How do I get root access?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You can open a shell inside the docker container with the ``test_local/run_bash.sh`` script.

To gain root access, remove the ``--user`` parameter or change it to to ``--user 0``

Q: What are the ``.sh`` scripts in the ``test_local/`` directory?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You don't really need anything besides the ``run_bash.sh`` script. If you want to run tests, use ``kb-sdk test``.

Q: How do I have multiple docker images for different versions of my app or dynamic service?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You will need to ``docker build`` them and tag them with different names if this is not automatically done by your app.


.. External links
.. _FastANI: https://github.com/kbaseapps/FastANI/blob/master/lib/FastANI/FastANIImpl.py
.. _Quast: https://github.com/kbaseapps/kb_quast/blob/master/kb_quast.spec
.. _Megahit: https://github.com/kbaseapps/kb_megahit/blob/master/MEGAHIT.spec
.. _Trimmomatic: https://github.com/kbaseapps/kb_trimmomatic/blob/master/kb_trimmomatic.spec
.. _the catalog: https://narrative.kbase.us/#catalog/apps
.. _User Interface Parameter Gallery: https://narrative.kbase.us/narrative/ws.23109.obj.1). Also see [Narrative UI Specification](https://github.com/kbase/kb_sdk/blob/master/doc/NarrativeUIAppSpecification.pdf

.. Internal links
.. _Editing Docker: ../howtos/edit_your_dockerfile.html
.. _the tutorial: ../tutorial/dependencies.html
.. _how to add reference data: ../howtos/work_with_reference_data.html
